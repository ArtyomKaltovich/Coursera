from gmpy2 import *
from binascii import unhexlify

N = mpz('17976931348623159077293051907890247336179769789423065727343008115 \
		77326758055056206869853794492129829595855013875371640157101398586 \
		47833778606925583497541085196591615128057575940752635007475935288 \
		71082364994994077189561705436114947486504671101510156394068052754 \
		0071584560878577663743040086340742855278549092581')


def round_sqrt(N):
	A,r = isqrt_rem(N)
	if r:
		A += 1
	return A


def try_A(A, N):
	x = isqrt(A**2 - N)
	return (A - x, A + x)


def factor_closest(N):
	A = round_sqrt(N)
	return try_A(A, N)


def check_factors(p,q,N):
    return p*q == N


def factor_with_average(A, N):
    x = isqrt(A**2 - N)
    return (A - x, A + x)


def decrypt_RSA(c, N, p, q):
	phi_N = N - p - q + 1
	e = mpz(65537)
	d = invert(e, phi_N)
	m = powmod(c, d, N)
	return m

p,q = factor_closest(N)
if check_factors(p,q,N):
	#print('N=',N)
	print('p=',p)
	#print('q=',q)
	c = mpz(22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540)
	m = decrypt_RSA(c, N, p, q)
	m = hex(m)
	print('hex=', m)
	pos = m.find('00')
	m = m[pos+2:]
	print('message=', unhexlify(m))
else:
	print('I can not factor first value:', N)


N = mpz('6484558428080716696628242653467722787263437207069762630604390703787 \
9730861808111646271401527606141756919558732184025452065542490671989 \
2428844841839353281972988531310511738648965962582821502504990264452 \
1008852816733037111422964210278402893076574586452336833570778346897 \
15838646088239640236866252211790085787877')

A = round_sqrt(N)
for i in range(2**20):
	p,q = try_A(A + i, N)
	if check_factors(p,q,N):
		#print('N=',N)
		print('p=',p)
		break
		#print('q=',q)
if i >= 2**20:
	print('I can not factor second value:', N)

